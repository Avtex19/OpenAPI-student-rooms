openapi: 3.0.3
info:
  title: Student Room Management API
  version: 1.0.0
  description: |
    Comprehensive REST API for managing students and rooms with CRUD operations, room assignments, 
    bulk operations, analytics, and enterprise-grade features.
    
    ## Key Features
    - **RESTful Design**: Proper HTTP methods and resource modeling
    - **Student Management**: Complete CRUD operations with validation
    - **Room Management**: Room CRUD with capacity constraints and occupancy tracking
    - **Room Assignment**: Individual and bulk student room assignments
    - **Enterprise Features**: Health monitoring, audit trails, comprehensive error handling
    - **Security**: JWT Bearer token authentication
    - **Performance**: Efficient pagination with limit/offset
    - **Data Integrity**: Proper nullable types and constraint validation
    
    ## Authentication
    Uses JWT Bearer token authentication. Include your token in the Authorization header:
    `Authorization: Bearer <your-jwt-token>`
    
    ## Rate Limiting
    - **100 requests per minute** per authenticated user
    - **1000 requests per hour** per authenticated user
    - Rate limit headers included in responses:
      - `X-RateLimit-Limit`: Maximum requests per window
      - `X-RateLimit-Remaining`: Remaining requests in current window  
      - `X-RateLimit-Reset`: Reset time (Unix timestamp)
  contact:
    name: API Support
    email: support@studentrooms-api.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.studentrooms.com/v1
    description: Production server
  - url: https://staging-api.studentrooms.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Local development server

security:
  - bearerAuth: []

tags:
  - name: Health
    description: System health and monitoring endpoints
  - name: Students
    description: Student resource operations
  - name: Rooms
    description: Room resource operations
  - name: Administration
    description: Cross-resource and bulk operations

paths:
  # ========================================
  # HEALTH CHECK
  # ========================================

  /health:
    get:
      summary: Health check
      description: Check API health status and system metrics
      operationId: healthCheck
      tags: [Health]
      security: []  # Public endpoint
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                healthy:
                  value:
                    status: "healthy"
                    timestamp: "2024-01-15T10:30:00Z"
                    version: "1.0.0"
                    uptime_seconds: 3600
                    metrics:
                      students_count: 10000
                      rooms_count: 1000
                      avg_occupancy: 75.5
                    message: "All systems operational"
        '503':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                unhealthy:
                  value:
                    status: "unhealthy"
                    timestamp: "2024-01-15T10:30:00Z"
                    version: "1.0.0"
                    error: "Database connection timeout"

  # ========================================
  # STUDENT ENDPOINTS
  # ========================================

  /students:
    get:
      tags: [Students]
      summary: List students
      operationId: listStudents
      description: >
        Retrieve paginated list of students with optional filtering.
        Results ordered by `id` ascending. Supports filtering by room, gender, and name search.
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: room_id
          in: query
          description: Filter students by room assignment
          schema:
            type: integer
            minimum: 1
        - name: sex
          in: query
          description: Filter students by gender
          schema:
            type: string
            enum: [M, F]
        - name: search
          in: query
          description: Search students by name (case-insensitive, partial match)
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Students retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of students matching filters
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
              examples:
                success:
                  value:
                    - id: 1
                      name: "John Doe"
                      age: 20
                      sex: "M"
                      room_id: 101
                      created_at: "2024-01-15T10:30:00Z"
                      updated_at: "2024-01-15T10:30:00Z"
                    - id: 2
                      name: "Jane Smith"
                      age: 19
                      sex: "F"
                      room_id: 101
                      created_at: "2024-01-15T10:30:00Z"
                      updated_at: "2024-01-15T10:30:00Z"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

    post:
      tags: [Students]
      summary: Create student
      operationId: createStudent
      description: >
        Create new student record. Server generates unique ID. 
        Optional room assignment if room exists and has capacity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentCreate'
            examples:
              with_room:
                summary: Student with room assignment
                value:
                  name: "Alice Johnson"
                  age: 19
                  sex: "F"
                  room_id: 102
              without_room:
                summary: Student without room assignment
                value:
                  name: "Bob Wilson"
                  age: 20
                  sex: "M"
                  room_id: null
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409':
          description: Conflict - room full, duplicate name, or room doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                room_full:
                  value:
                    code: "ERR_ROOM_FULL"
                    message: "Room 102 is at maximum capacity"
                    details: "Room capacity: 4, current occupancy: 4"
                duplicate_name:
                  value:
                    code: "ERR_DUPLICATE_NAME"
                    message: "Student with this name already exists"
        '422': { $ref: '#/components/responses/ValidationError' }
        '500': { $ref: '#/components/responses/ServerError' }

  /students/{id}:
    get:
      tags: [Students]
      summary: Get student
      operationId: getStudent
      description: Retrieve single student by unique identifier
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '200':
          description: Student retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404': { $ref: '#/components/responses/NotFoundStudent' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

    put:
      tags: [Students]
      summary: Replace student
      operationId: replaceStudent
      description: >
        Complete replacement of student record. All fields required.
        Omitted nullable fields will be set to null.
      parameters:
        - $ref: '#/components/parameters/StudentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentUpdate'
            examples:
              complete_update:
                value:
                  name: "John Smith"
                  age: 21
                  sex: "M"
                  room_id: 103
      responses:
        '200':
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFoundStudent' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409':
          description: Conflict - room full or doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422': { $ref: '#/components/responses/ValidationError' }
        '500': { $ref: '#/components/responses/ServerError' }

    delete:
      tags: [Students]
      summary: Delete student
      operationId: deleteStudent
      description: Permanently remove student record from system
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '204':
          description: Student deleted successfully (no content)
        '404': { $ref: '#/components/responses/NotFoundStudent' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

  /students/{student_id}/move:
    patch:
      tags: [Administration]
      summary: Move student to room
      operationId: moveStudent
      description: >
        Move student to different room. Updates only room_id field.
        Validates room capacity and existence.
      parameters:
        - name: student_id
          in: path
          required: true
          description: Student identifier
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [room_id]
              properties:
                room_id:
                  type: integer
                  nullable: true
                  description: Target room ID or null to unassign
                  minimum: 1
                reason:
                  type: string
                  description: Optional reason for move (audit trail)
                  maxLength: 500
            examples:
              assign_room:
                summary: Assign to room
                value:
                  room_id: 105
                  reason: "Student requested room change"
              unassign_room:
                summary: Remove from room
                value:
                  room_id: null
                  reason: "Temporary room removal"
      responses:
        '200':
          description: Student moved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFoundGeneric' }
        '409':
          description: Room at capacity or business rule violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                room_full:
                  value:
                    code: "ERR_ROOM_FULL"
                    message: "Target room is at maximum capacity"
                    details: "Room 105 capacity: 4, current occupancy: 4"
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

  /students/bulk-move:
    patch:
      tags: [Administration]
      summary: Bulk move students
      operationId: bulkMoveStudents
      description: >
        Move multiple students to different rooms in single transaction.
        Returns detailed results for successful and failed moves.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [moves]
              properties:
                moves:
                  type: array
                  description: Array of student move operations
                  minItems: 1
                  maxItems: 50
                  items:
                    type: object
                    required: [student_id, room_id]
                    properties:
                      student_id:
                        type: integer
                        minimum: 1
                      room_id:
                        type: integer
                        nullable: true
                        minimum: 1
                      reason:
                        type: string
                        maxLength: 500
            examples:
              bulk_moves:
                value:
                  moves:
                    - student_id: 1
                      room_id: 105
                      reason: "Semester room reassignment"
                    - student_id: 2
                      room_id: 106
                      reason: "Semester room reassignment"
      responses:
        '200':
          description: Bulk move completed (may include partial failures)
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful_moves:
                    type: array
                    items:
                      type: object
                      properties:
                        student_id:
                          type: integer
                        old_room_id:
                          type: integer
                          nullable: true
                        new_room_id:
                          type: integer
                          nullable: true
                  failed_moves:
                    type: array
                    items:
                      type: object
                      properties:
                        student_id:
                          type: integer
                        error_code:
                          type: string
                        error_message:
                          type: string
                  summary:
                    type: object
                    properties:
                      total_requested:
                        type: integer
                      successful_count:
                        type: integer
                      failed_count:
                        type: integer
              examples:
                partial_success:
                  value:
                    successful_moves:
                      - student_id: 1
                        old_room_id: 101
                        new_room_id: 105
                    failed_moves:
                      - student_id: 2
                        error_code: "ERR_ROOM_FULL"
                        error_message: "Room 106 is at maximum capacity"
                    summary:
                      total_requested: 2
                      successful_count: 1
                      failed_count: 1
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '422': { $ref: '#/components/responses/ValidationError' }
        '500': { $ref: '#/components/responses/ServerError' }

  # ========================================
  # ROOM ENDPOINTS
  # ========================================

  /rooms:
    get:
      tags: [Rooms]
      summary: List rooms
      operationId: listRooms
      description: >
        Retrieve paginated list of rooms with occupancy information.
        Supports search by room name.
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: search
          in: query
          description: Search rooms by name (case-insensitive)
          schema:
            type: string
            maxLength: 100
        - name: include_occupancy
          in: query
          description: Include current student count in response
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Rooms retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of rooms matching filters
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
              examples:
                with_occupancy:
                  value:
                    - id: 101
                      name: "Room #101"
                      capacity: 4
                      current_occupancy: 2
                      created_at: "2024-01-15T10:30:00Z"
                      updated_at: "2024-01-15T10:30:00Z"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

    post:
      tags: [Rooms]
      summary: Create room
      operationId: createRoom
      description: Create new room with specified capacity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomCreate'
            examples:
              standard_room:
                value:
                  name: "Room #205"
                  capacity: 4
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409':
          description: Room with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                duplicate_name:
                  value:
                    code: "ERR_DUPLICATE_ROOM"
                    message: "Room with this name already exists"
        '422': { $ref: '#/components/responses/ValidationError' }
        '500': { $ref: '#/components/responses/ServerError' }

  /rooms/{id}:
    get:
      tags: [Rooms]
      summary: Get room
      operationId: getRoom
      description: Retrieve single room by unique identifier
      parameters:
        - $ref: '#/components/parameters/RoomId'
        - name: include_students
          in: query
          description: Include list of assigned students
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Room retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Room'
                  - type: object
                    properties:
                      students:
                        type: array
                        items:
                          $ref: '#/components/schemas/Student'
                        description: List of students (if include_students=true)
        '404': { $ref: '#/components/responses/NotFoundRoom' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

    put:
      tags: [Rooms]
      summary: Replace room
      operationId: replaceRoom
      description: >
        Complete replacement of room definition.
        Cannot reduce capacity below current occupancy.
      parameters:
        - $ref: '#/components/parameters/RoomId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUpdate'
            examples:
              capacity_increase:
                value:
                  name: "Room #101 - Extended"
                  capacity: 6
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFoundRoom' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409':
          description: Cannot reduce capacity below current occupancy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                capacity_violation:
                  value:
                    code: "ERR_CAPACITY_VIOLATION"
                    message: "Cannot reduce capacity below current occupancy"
                    details: "Current occupancy: 4, requested capacity: 2"
        '422': { $ref: '#/components/responses/ValidationError' }
        '500': { $ref: '#/components/responses/ServerError' }

    delete:
      tags: [Rooms]
      summary: Delete room
      operationId: deleteRoom
      description: Delete room if no students are currently assigned
      parameters:
        - $ref: '#/components/parameters/RoomId'
      responses:
        '204':
          description: Room deleted successfully (no content)
        '404': { $ref: '#/components/responses/NotFoundRoom' }
        '409':
          description: Cannot delete room with assigned students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                room_occupied:
                  value:
                    code: "ERR_ROOM_OCCUPIED"
                    message: "Cannot delete room with assigned students"
                    details: "Current occupancy: 3 students"
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

  /rooms/{id}/students:
    get:
      tags: [Rooms]
      summary: List students in room
      operationId: listStudentsInRoom
      description: Retrieve all students assigned to specific room
      parameters:
        - $ref: '#/components/parameters/RoomId'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Students in room retrieved successfully
          headers:
            X-Total-Count:
              description: Total students in this room
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '404': { $ref: '#/components/responses/NotFoundRoom' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

# ========================================
# COMPONENTS
# ========================================

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication

  parameters:
    StudentId:
      name: id
      in: path
      required: true
      description: Unique student identifier
      schema:
        type: integer
        minimum: 1

    RoomId:
      name: id
      in: path
      required: true
      description: Unique room identifier
      schema:
        type: integer
        minimum: 1

    Limit:
      name: limit
      in: query
      description: Maximum number of items to return (max 100)
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100

    Offset:
      name: offset
      in: query
      description: Number of items to skip for pagination
      schema:
        type: integer
        default: 0
        minimum: 0

  responses:
    BadRequest:
      description: Invalid request parameters or malformed data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid_parameter:
              value:
                code: "ERR_INVALID_PARAMETER"
                message: "Invalid parameter value"
                details: "Limit must be between 1 and 100"
            malformed_json:
              value:
                code: "ERR_MALFORMED_REQUEST"
                message: "Invalid JSON in request body"

    Unauthorized:
      description: Authentication failed or missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            missing_token:
              value:
                code: "ERR_MISSING_TOKEN"
                message: "Authorization token required"
                details: "Include JWT token in Authorization header"
            invalid_token:
              value:
                code: "ERR_INVALID_TOKEN"
                message: "Invalid or expired token"

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  validation_errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                        value:
                          description: The invalid value that was provided
          examples:
            validation_failed:
              value:
                code: "ERR_VALIDATION_FAILED"
                message: "Request validation failed"
                details: "One or more fields contain invalid values"
                validation_errors:
                  - field: "age"
                    message: "Age must be a positive integer"
                    value: -5
                  - field: "name"
                    message: "Name cannot be empty"
                    value: ""

    NotFoundStudent:
      description: Student not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            not_found:
              value:
                code: "ERR_STUDENT_NOT_FOUND"
                message: "Student not found"
                details: "No student exists with ID 999"

    NotFoundRoom:
      description: Room not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            not_found:
              value:
                code: "ERR_ROOM_NOT_FOUND"
                message: "Room not found"
                details: "No room exists with ID 999"

    NotFoundGeneric:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            server_error:
              value:
                code: "ERR_INTERNAL_SERVER"
                message: "An internal server error occurred"
                details: "Please try again later or contact support"

  schemas:
    # Core Student Schema
    Student:
      type: object
      required: [id, name, age, sex]
      properties:
        id:
          type: integer
          description: Unique student identifier
          example: 1
          readOnly: true
        name:
          type: string
          description: Full name of the student
          maxLength: 128
          minLength: 1
          example: "John Doe"
        age:
          type: integer
          description: Student age in years
          minimum: 0
          maximum: 150
          example: 20
        sex:
          type: string
          enum: [M, F]
          description: Student gender (M=Male, F=Female)
          example: "M"
        room_id:
          type: integer
          nullable: true
          description: ID of assigned room, null if unassigned
          minimum: 1
          example: 101
        created_at:
          type: string
          format: date-time
          description: Record creation timestamp
          example: "2024-01-15T10:30:00Z"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Last modification timestamp
          example: "2024-01-15T10:30:00Z"
          readOnly: true

    StudentCreate:
      type: object
      required: [name, age, sex]
      properties:
        name:
          type: string
          description: Full name of the student
          maxLength: 128
          minLength: 1
          example: "Alice Johnson"
        age:
          type: integer
          description: Student age in years
          minimum: 0
          maximum: 150
          example: 19
        sex:
          type: string
          enum: [M, F]
          description: Student gender (M=Male, F=Female)
          example: "F"
        room_id:
          type: integer
          nullable: true
          description: ID of room to assign, null for no assignment
          minimum: 1
          example: 102

    StudentUpdate:
      type: object
      required: [name, age, sex]
      properties:
        name:
          type: string
          description: Full name of the student
          maxLength: 128
          minLength: 1
          example: "Alice Johnson-Smith"
        age:
          type: integer
          description: Student age in years
          minimum: 0
          maximum: 150
          example: 20
        sex:
          type: string
          enum: [M, F]
          description: Student gender (M=Male, F=Female)
          example: "F"
        room_id:
          type: integer
          nullable: true
          description: ID of assigned room, null to unassign
          minimum: 1
          example: 103

    # Core Room Schema
    Room:
      type: object
      required: [id, name, capacity]
      properties:
        id:
          type: integer
          description: Unique room identifier
          example: 101
          readOnly: true
        name:
          type: string
          description: Room name or identifier
          maxLength: 128
          minLength: 1
          example: "Room #101"
        capacity:
          type: integer
          description: Maximum number of students
          minimum: 1
          maximum: 50
          example: 4
        current_occupancy:
          type: integer
          description: Number of currently assigned students
          minimum: 0
          example: 2
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Record creation timestamp
          example: "2024-01-15T10:30:00Z"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Last modification timestamp
          example: "2024-01-15T10:30:00Z"
          readOnly: true

    RoomCreate:
      type: object
      required: [name, capacity]
      properties:
        name:
          type: string
          description: Room name or identifier
          maxLength: 128
          minLength: 1
          example: "Room #205"
        capacity:
          type: integer
          description: Maximum number of students
          minimum: 1
          maximum: 50
          example: 4

    RoomUpdate:
      type: object
      required: [name, capacity]
      properties:
        name:
          type: string
          description: Room name or identifier
          maxLength: 128
          minLength: 1
          example: "Room #205 - Extended"
        capacity:
          type: integer
          description: Maximum number of students
          minimum: 1
          maximum: 50
          example: 6

    # Error Schema
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: Machine-readable error code
          example: "ERR_STUDENT_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          maxLength: 512
          example: "Student not found"
        details:
          type: string
          nullable: true
          description: Additional error context
          maxLength: 1024
          example: "No student exists with ID 999"

    # Health Response Schema
    HealthResponse:
      type: object
      required: [status, timestamp, version]
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Overall API health status
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
          example: "2024-01-15T10:30:00Z"
        version:
          type: string
          description: API version
          example: "1.0.0"
        uptime_seconds:
          type: integer
          description: API uptime in seconds
          minimum: 0
          example: 3600
        metrics:
          type: object
          description: System metrics (when healthy)
          properties:
            students_count:
              type: integer
              description: Total number of students
              minimum: 0
              example: 10000
            rooms_count:
              type: integer
              description: Total number of rooms
              minimum: 0
              example: 1000
            avg_occupancy:
              type: number
              format: float
              description: Average room occupancy percentage
              minimum: 0
              maximum: 100
              example: 75.5
        message:
          type: string
          description: Status message
          example: "All systems operational"
        error:
          type: string
          description: Error description (when unhealthy)
          example: "Database connection timeout"